{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"FASTQ",
				"FASTQ_DIR"
			],
			[
				"nu",
				"numpy\tmodule"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/F/jeremias/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/em.md",
			"settings":
			{
				"buffer_size": 4231,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\"\"\"\nAuthor: J. Brand\nAffiliation: Unibas\nAim: Workflow for transcriptome assembly, annotation and assessment\nDate: 20. Nov. 2016\nRun: snakemake   -s Snakefile\nLatest modification:\n  - add more flexible input\n  - add reporting\n  - add checks for gzip\n  - integrate gzip of intermediate results\n  - add a block to run if fail or succeed\n  - add evironment file for bioconda\n  - plotting of busco automated\n  - move transcriptomes to better places\n  - add trinity version to software.versions file\n\"\"\"\n# import statements\nfrom snakemake.utils import report\nfrom os.path import join\nimport os\nimport time\n\n\n# Uses a yaml file as input\nconfigfile: \"config.dev.yaml\"\n\n# Preparation------------------------------------------------------------------\n#TIMESTAMP = time.strftime(\"%Y%m%d\")\nTIMESTAMP = \"20170608\"\n# check if the necessary dirs exist and if not creates them\ndef save_mkdir( dirs ):\n\tfor d in dirs:\n\t\tif not os.path.isdir(d):\n\t\t\tos.mkdir(d)\n\t\t\tprint(\"Creating directory: \" + d)\n\ndef check_trailing_slash( path ):\n    if path[-1] != \"/\":\n        path = path + \"/\"\n    return path\n\ndirs = [\"logs\", \"logs/trinity\", \"logs/transrate\",\n        \"logs/rcorrector\", \"trinity\", \"transrate\",\n        \"transrate/summary\", \"busco\", \"logs/busco\"]\nsave_mkdir(dirs)\n\n\n# Globals ---------------------------------------------------------------------\n   \n# define global things here\n\n# Full path to a folder that holds all of your FASTQ files.\nFASTQ_DIR = check_trailing_slash(config[\"fastqdir\"])\n# loads all of the path into variable\nTRANSRATE_DIR = check_trailing_slash(config[\"transrateDir\"])\nHOME_DIR = check_trailing_slash(config[\"homedir\"])\nVOUCHER_DIR = check_trailing_slash(config[\"voucher_dir\"])\n\n\n# A Snakemake regular expression matching the forward mate FASTQ files.\n# we get a list with the names of all the files in the working directory\nSAMPLES, = glob_wildcards(join(FASTQ_DIR, '{sample}_R1.fq.gz'))\n\n# Patterns for the 1st mate and the 2nd mate using the 'sample' wildcard.\nPATTERN_R1 = '{sample}_R1.fq.gz'\nPATTERN_R2 = '{sample}_R2.fq.gz'\n\n\n\n# Rules -----------------------------------------------------------------------\n\n\n\nrule all:\n    input:\n        \"macpipe_report_\" + TIMESTAMP + \".html\"\n\n# This is a template script to run trinity\n# Using a JSON file as input will be better\n# Sample is a wildcard equivalent to .+\n# rule All: # this top rule is here to define the goal of the script\n#     input:\n#         \"{sample}trinotate_annotation_report.xls\"\n#     log:\"snakemake.report.log\"\n\n# TODO software version printout and link to report\n\n# rule run_rcorrector:\n#     input:\n#         forward = join(FASTQ_DIR, PATTERN_R1),\n#         reverse = join(FASTQ_DIR, PATTERN_R2)\n#     output:\n#         FASTQ_DIR + \"{sample}_R1.cor.fq\",\n#         FASTQ_DIR + \"{sample}_R2.cor.fq\"\n#     log:\n#     \t\"logs/rcorrector/{sample}.log\"\n#     params:\n#         outdir = FASTQ_DIR\n#         \"\"\"\n#         ~/perl5/perlbrew/perls/5.16.2t/bin/perl ~/bin/run_rcorrector.pl -k 31 -t 30 \\\n#         -od {params.outdir}  -1 {input.forward}  -2 {input.reverse} &> {log}\n#         \"\"\"\n\n\nrule trim_and_trinity:\n    input:\n        forward  = FASTQ_DIR + \"{sample}_R1.fq.gz\",\n        reverse  = FASTQ_DIR + \"{sample}_R2.fq.gz\"\n    output:\n        assembly = expand(\"trinity/{{sample}}_{T}.Trinity.fasta\", T=TIMESTAMP),\n        log      = expand(\"logs/trinity/{{sample}}_{T}.shell.log\", T=TIMESTAMP)\n    log:\n        expand(\"logs/trinity/{{sample}}_{T}.log\", T=TIMESTAMP)\n    params:\n        adapters =  config[\"adapters_fasta\"],\n        outdir   =  FASTQ_DIR,\n        trinity  =  config[\"trinity\"],\n        trim_adapter = config[\"trim_adapter\"],\n        leading  =  config[\"trim_leading\"],\n        trailing  =  config[\"trim_trailing\"],\n        minlength  =  config[\"trim_minlength\"]\n    threads: 14  # threads only works if --cores is set to the actual number of cores when running the snakemake\n    # message: expand(\"Executing with {threads} threads on the following files {sample}.\", sample=SAMPLES)\n    # We also want a logfile\n    # log: expand(\"logs/{sample}.trinity.log\", sample=SAMPLES)\n    shell:\n        \"\"\"\n        {params.trinity} --seqType fq \\\n        --trimmomatic --CPU {threads} --max_memory 150G \\\n        --output 'trinity/'{wildcards.sample}_{TIMESTAMP}'.trinity' \\\n        --left   {input.forward}  \\\n        --right  {input.reverse} \\\n        --normalize_reads  --normalize_max_read_cov 30 \\\n        --quality_trimming_params 'ILLUMINACLIP:{params.adapters}:{params.trim_adapter} LEADING:{params.leading} TRAILING:{params.trailing} MINLEN:{params.minlength}' > ./logs/trinity/{wildcards.sample}_{TIMESTAMP}.shell.log 2> {log} && \\\n        mv trinity/{wildcards.sample}_{TIMESTAMP}.trinity/Trinity.fasta {output.assembly} && \\\n        sed -i 's/>TRINITY/>{wildcards.sample}_{TIMESTAMP}/' {output.assembly}\n        \"\"\"\n\n\nrule run_transrate:\n    input:\n        assembly =  expand(\"trinity/{{sample}}_{T}.Trinity.fasta\", T=TIMESTAMP),\n        forward  =  FASTQ_DIR + \"{sample}_R1.fq.gz\",\n        reverse  =  FASTQ_DIR + \"{sample}_R2.fq.gz\"\n    output:\n        expand(\"transrate/{{sample}}_{T}.transrate/{{sample}}_{T}.Trinity/good.{{sample}}_{T}.Trinity.fasta\", T=TIMESTAMP),\n        expand(\"transrate/{{sample}}_{T}.transrate/assemblies.csv\", T=TIMESTAMP),\n        expand(\"transrate/{{sample}}_{T}.transrate/{{sample}}_{T}.Trinity/contigs.csv\", T=TIMESTAMP)\n    log:\n    \texpand(\"logs/transrate/{{sample}}_{T}.log\", T=TIMESTAMP)\n    params:\n        transDir  =  TRANSRATE_DIR,\n        dataDir   =  FASTQ_DIR,\n        homeDir   =  HOME_DIR,\n        transrate =  config[\"transrate\"]\n    threads: 28\n    shell:\n        \"\"\"\n        {params.transrate} --assembly {params.homeDir}{input.assembly} \\\n        --output {params.transDir}{wildcards.sample}_{TIMESTAMP}.transrate \\\n        --threads {threads} \\\n        --left {input.forward} \\\n        --right {input.reverse} > logs/transrate/{wildcards.sample}.transrate.log 2> {log}\n        \"\"\"\n\n\nrule gather_transrate:\n    # move all transrate results to same folder for easier summary later\n    # First I used the same wildcard input output names for this rule as I did\n    # for the gather busco rule but that somehow caused it not to be plotted in the\n    # dag. More of a cosmetic issue.\n    input:\n        a = expand(\"transrate/{{sample}}_{T}.transrate/assemblies.csv\", T=TIMESTAMP),\n        c  = expand(\"transrate/{{sample}}_{T}.transrate/{{sample}}_{T}.Trinity/contigs.csv\", T=TIMESTAMP)\n    output:\n        a = expand(\"transrate/summary/{{sample}}_{T}.assemblies.csv\", T=TIMESTAMP),\n        c = expand(\"transrate/summary/{{sample}}_{T}.contigs.csv\", T=TIMESTAMP)\n    shell:\n        \"\"\"\n        cp {input.a} {output.a}\n        cp {input.c}  {output.c}\n\n        \"\"\"\n\n\n        # assembly = \"transrate/summary/\" + TIMESTAMP + \"assemblies.csv\"\n\n# Here the assemblies are being summarized and we need to expanda list\nrule summarize_transrate_assembly:\n    input:\n        expand(\"transrate/summary/{sample}_{T}.assemblies.csv\",sample=SAMPLES, T=TIMESTAMP)\n    output:\n        \"transrate/summary/run_\" + TIMESTAMP + \"_assemblies.csv\"\n    run:\n        assemblies = input\n        #generate first line we need in outfile:\n        with open(output[0], \"w\") as outfile:\n            with open(assemblies[0], \"r\") as infile:\n                lines = infile.readlines()\n                outfile.write(lines[0])\n\n        # now we open the outfile in appending mode to add all the results\n        with open(output[0], \"a\") as outfile:\n            for assembly in assemblies:\n                with open(assembly, \"r\") as infile:\n                    lines = infile.readlines()\n                    outfile.write(lines[1])\n\n\nrule fish_4_genes:\n    input:\n        assemblies = expand(\"trinity/{sample}_{T}.Trinity.fasta\", sample=SAMPLES, T=TIMESTAMP),\n        assembly_dir = \"trinity/\",\n        voucher_dir = VOUCHER_DIR,\n        vouchers    = config[\"vouchers\"],\n        one = config[\"ref_28S\"],\n        four = config[\"ref_4genes\"]\n    output:\n        one = \"blast_results/blastn_summary_\" + TIMESTAMP + \"_fish_28S\",\n        four =\"blast_results/blastn_summary_\" + TIMESTAMP + \"_fish_4genes\"\n    params:\n        timestamp = TIMESTAMP \n    threads: 12 \n    shell:\n        \"\"\"\n        python3 scripts/fish_genes.py \\\n            -a {input.assembly_dir} \\\n            -q {input.voucher_dir} -c {input.vouchers} \\\n            -v {input.one} -T {threads} \\\n            -o {output.one} &&  python3 scripts/fish_genes.py \\\n            -a {input.assembly_dir} \\\n            -q {input.voucher_dir} -c {input.vouchers} \\\n            -v {input.four} -T {threads} -o {output.four} \n\n        \"\"\"\n\n# transrate plotting\n# TODO change locations of file to something sensible\n# ownimgg directory?\nrule plot_transrate_contigs:\n    input:\n        expand(\"transrate/summary/{{sample}}_{T}.contigs.csv\", T=TIMESTAMP)\n    output:\n        expand(\"{{sample}}_{T}.png\", T=TIMESTAMP)\n    script:\n        \"R/contigs.plot.R\"\n\n\n# add busco rule\nrule busco:\n    input:\n        assembly =   expand(\"trinity/{{sample}}_{T}.Trinity.fasta\", T=TIMESTAMP)\n    output:\n        out      =   expand(HOME_DIR + \"busco/run_{{sample}}_{T}.busco/short_summary_{{sample}}_{T}.busco.txt\", T=TIMESTAMP)\n    params:\n        py3      =   config[\"py3\"],\n        BUSCO    =   config[\"BUSCO\"],\n        BuscoLib =   config[\"BuscoLib\"],\n        homedir  =   HOME_DIR\n    threads: 14\n    log:\n        expand(\"logs/busco/{{sample}}_{T}.log\", T=TIMESTAMP)\n    shell:\n        # cd {params.outdir}\n        \"\"\"\n        {params.py3}  {params.BUSCO} -f \\\n                -i {params.homedir}{input.assembly} \\\n                -o {wildcards.sample}_{TIMESTAMP}.busco              \\\n                -l  {params.BuscoLib}    \\\n                -m  tran -c {threads} &>> {log} && \\\n        mv  run_{wildcards.sample}_{TIMESTAMP}.busco  busco/\n\n        \"\"\"\n\n\nrule busco_on_transrate:\n    # run busco on transrate optimized assembly\n    input:\n        assembly =   expand(\"transrate/{{sample}}_{T}.transrate/{{sample}}_{T}.Trinity/good.{{sample}}_{T}.Trinity.fasta\", T=TIMESTAMP)\n    output:\n        out      =   expand(HOME_DIR + \"busco/run_{{sample}}_{T}.good.busco/short_summary_{{sample}}_{T}.good.busco.txt\", T=TIMESTAMP),\n        outass   =   expand(\"trinity/{{sample}}_{T}_transrate_optimized.Trinity.fasta\", T=TIMESTAMP)\n    params:\n        outdir   =   HOME_DIR + \"busco/\",\n        py3      =   config[\"py3\"],\n        BUSCO    =   config[\"BUSCO\"],\n        BuscoLib =   config[\"BuscoLib\"],\n        homedir  =   HOME_DIR\n    threads: 14\n    log:\n        expand(\"logs/busco/{{sample}}_{T}.good.log\", T=TIMESTAMP)\n    # I move the assessed transrate assembly over to the trinity folder\n    shell:\n        # cd {params.outdir}\n        \"\"\"\n        {params.py3}  {params.BUSCO} -f \\\n                -i {params.homedir}{input.assembly} \\\n                -o {wildcards.sample}_{TIMESTAMP}.good.busco              \\\n                -l  {params.BuscoLib}    \\\n                -m  tran -c {threads} &>> {log} && \\\n        mv  run_{wildcards.sample}_{TIMESTAMP}.good.busco  busco/ && \\\n        mv {input.assembly} {output.outass}\n        \"\"\"\n\n\n# TODO rule decision on assembly\nrule gather_busco:\n    # move all transrate results to same folder for easier summary later\n    # we do not need the expand statement here because plot busco will just call this function many times\n    input:\n        normal   = expand(HOME_DIR + \"busco/run_{{sample}}_{T}.busco/short_summary_{{sample}}_{T}.busco.txt\", T=TIMESTAMP),\n        good     = expand(HOME_DIR + \"busco/run_{{sample}}_{T}.good.busco/short_summary_{{sample}}_{T}.good.busco.txt\", T=TIMESTAMP)\n    output:\n        normal   = expand(\"busco/summary/short_summary_{{sample}}_{T}.busco.txt\", T=TIMESTAMP),\n        good     = expand(\"busco/summary/short_summary_{{sample}}_{T}.good.busco.txt\", T=TIMESTAMP)\n    shell:\n        \"\"\"\n        cp {input.normal} {output.normal}\n        cp {input.good}   {output.good}\n\n        \"\"\"\n\n\nrule plot_busco:\n    input:\n        expand(\"transrate/summary/{sample}_{T}.contigs.csv\", T=TIMESTAMP, sample=SAMPLES),\n        transrate_summary = \"transrate/summary/run_\" + TIMESTAMP + \"_assemblies.csv\",\n        normal            = expand(\"busco/summary/short_summary_{sample}_{T}.busco.txt\", sample=SAMPLES, T=TIMESTAMP),\n        good              = expand(\"busco/summary/short_summary_{sample}_{T}.good.busco.txt\", sample=SAMPLES, T=TIMESTAMP)\n    output:\n        busco_pdf         = \"busco/summary/run_\" + TIMESTAMP + \"_busco.pdf\",\n        busco_trans_pdf   = \"busco/summary/run_\" + TIMESTAMP + \"_busco_with_transrate.pdf\"\n    params:\n        timestamp = TIMESTAMP,\n        busco_folder      = \"busco/summary/\"\n    script:\n        \"R/plot_busco_summary.R\"\n\n\n# TODO rename assembly headers\n# TODO\n# add plotting for BUSCO\n# The default plotting does not work and we have to add\n# options(bitmapType='cairo')\n# at the beginning of the script. -.-\nrule versions:\n    output:\n        log         = \"logs/run_\" + TIMESTAMP + \"_software.versions\"\n    params:\n        trinity     = config[\"trinity\"],\n        transrate   = config[\"transrate\"],\n        BUSCO       = config[\"BUSCO\"],\n        time        = TIMESTAMP\n    shell:\n        \"\"\"\n        echo \"These are the versions of software used for run: {params.time}\" &>> {output.log}\n        date  &>> {output.log}\n        python --version &>> {output.log}\n        hmmscan -h | grep -E '^\\#\\ H' &>> {output.log}\n        blastn -h | grep Nucleotide &>> {output.log}\n        embossversion &>> {output.log}\n        echo \"perl version: \" &>> {output.log}\n        perl -e 'print $];' &>> {output.log}\n        {params.BUSCO} --version &>> {output.log}\n        echo \"transrate version:\" {params.transrate} --version &>> {output.log}\n        echo {params.trinity}  >> {output.log}\n        \"\"\"\n\n\n# TODO report file should contain:\n# plot of coverage\n# busco and transrate stats\n# software versions\n# timestamp\nrule report:\n    input:\n        busco_pdf           = \"busco/summary/run_\" + TIMESTAMP + \"_busco.pdf\",\n        busco_trans_pdf     = \"busco/summary/run_\" + TIMESTAMP + \"_busco_with_transrate.pdf\",\n        transrate_summary   = \"transrate/summary/run_\" + TIMESTAMP + \"_assemblies.csv\",\n        assembly_plot       = expand(\"{sample}_{T}.png\", sample=SAMPLES, T=TIMESTAMP),\n        versions            = \"logs/run_\" + TIMESTAMP + \"_software.versions\",\n        fish_4genes         = \"blast_results/blastn_summary_\" + TIMESTAMP + \"_fish_4genes\",\n        fish_28S            = \"blast_results/blastn_summary_\" + TIMESTAMP + \"_fish_28S\"\n    output:\n        report_name         = \"macpipe_report_\" + TIMESTAMP + \".html\"\n    run:\n        from snakemake.utils import report\n        run_name = TIMESTAMP \n        report(\"\"\" \n        Results of the macpipe_trans run for transcriptome assembly and assessment.\n        Run timestamp/ID: {run_name}\n        \"\"\", output[0], **input)\n        \n\n\n# Finishing up --------------------------------------------------------------\nonsuccess:\n    print(\"Workflow finished, no error\")\nonerror:\n    print(\"An error occurred with the snakemake run\")\n    # here it would be good to include timstamping\n    shell(\"mail -s 'Error in Snakemake run' jeremias.brand@unibas.ch < {log}\")\n\n# TODO add separate snakefile for annotation\n",
			"file": "macpipe.trans.main.small.snake",
			"file_size": 15212,
			"file_write_time": 131445126262602357,
			"settings":
			{
				"buffer_size": 15215,
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "config.dev.yaml",
			"settings":
			{
				"buffer_size": 1402,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/fish_genes.py",
			"settings":
			{
				"buffer_size": 9075,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "set py",
		"selected_items":
		[
			[
				"set py",
				"Set Syntax: Python"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"Git: Status",
				"Git: Status"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				" toggle li",
				"SublimeLinter: Toggle Linter"
			],
			[
				"lin",
				"SublimeLinter: Enable Inline Tooltips"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"synta C",
				"Set Syntax: C++"
			],
			[
				"syn",
				"Set Syntax: R"
			],
			[
				"synt C",
				"Set Syntax: C++"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				":w",
				":w - Save"
			],
			[
				":W",
				":w - Save"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"syntax MARK",
				"Set Syntax: Markdown"
			],
			[
				"menu",
				"View: Toggle Menu"
			]
		],
		"width": 432.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"sublime-executable_path()",
			"sublime-executable._path()",
			"sublime-executable.pat",
			"cmd",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/jeremias/Dropbox/Bioinformatics/dev/macpipe_trans",
		"/F/jeremias/Dropbox/Documents/CV-website/Jeremias-Brand.github.io"
	],
	"file_history":
	[
		"/F/jeremias/Dropbox/Documents/PhD/Viz/Macrostomum Drawings Jeremias/Mac076/README.txt",
		"/F/jeremias/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.trans.main.small.snake",
		"/C/Users/jeremias/AppData/Local/Temp/scp19309/home/jeremias/assembly/P248/macpipe-2017-06-16/report_soap_20170623.html",
		"/F/jeremias/Dropbox/Documents/PhD/Applications/VISA USA/application details",
		"/F/jeremias/Dropbox/Documents/PhD/Viz/Viz_Stylet_sperm.txt",
		"/F/jeremias/Dropbox/Bioinformatics/dev/macpipe_trans/config.macpipe.trans.small.yaml",
		"/F/jeremias/Dropbox/Bioinformatics/dev/macpipe_trans/data/trinity.conf.snake",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/css/main.css",
		"/F/jeremias/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.trans.stamp.small.snake",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_config.yml",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/base-cv.html",
		"/F/jeremias/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.trans.small_170601.snake",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_static/morphometry.md",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/page.html",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/CV.html.bku",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/CV.html",
		"/F/jeremias/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.trans.small.snake",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/css/CV.css",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/CV.md",
		"/F/jeremias/Dropbox/Bioinformatics/dev/macpipe_trans/macpipe.trans.small.snake_from_server170601",
		"/run/user/1000/gvfs/sftp:host=131.152.125.111/home/jeremias/dev/macpipe_trans/macpipe.trans.stamp.small.snake",
		"/run/user/1000/gvfs/sftp:host=131.152.125.111/home/jeremias/dev/macpipe_trans/config.macpipe.trans.small.yaml",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/data/Mcla",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/data/Mcla.readdata.txt",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/dev-testfile",
		"/media/Shared/Dropbox/Bioinformatics/Reports/macpipe_trans/macpipe.trans.stamp.snake",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_posts/2015-01-04-first-post.md",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_posts/2015-01-15-pirates.md",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/delim/spdead.bpp.txt",
		"/media/Shared/Dropbox/Bioinformatics/Reports/28S_2017/275 documents from Macrostomidae.fasta",
		"/media/Shared/Dropbox/Bioinformatics/Reports/28S_2017/dd.fasta",
		"/media/Shared/Dropbox/Bioinformatics/Reports/28S_2017/commands.txt",
		"/media/Shared/Dropbox/Bioinformatics/Scripts/Python/hackerrank/30_day_of_code/05-strings.py",
		"/media/Shared/Dropbox/Bioinformatics/Scripts/dotfiles/alcedo-2017-05-29/.vimrc",
		"/media/Shared/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/_layouts/minimal.html",
		"/media/Shared/Dropbox/Bioinformatics/GIT/somefile2.py",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/BPP/ChenLi2001.bpp.ctl",
		"/home/jeremias/soft/bpp3.3a/examples/ChenLi2001.Imap.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/BPP/yu2001.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/come_2017/02_cpp/functions.hpp",
		"/home/jeremias/soft/BEASTv1.8.4/README.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/BPP/yu2001.bpp.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/come_2017/02_cpp/CMakeLists.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/STARBEAST/phryno_bpp.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/STARBEAST/methods.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/come_2017/02_cpp/playground.cpp",
		"/home/jeremias/soft/bpp3.3a/src/README.txt",
		"/home/jeremias/soft/bpp3.3a/examples/ChenLi2001.txt",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/brown.GTRG.out",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/brown.GTRG_adeq.out",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/MCbase.dat",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/lysozyme/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/baseml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/adh/M8.1/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/adh/M8/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/adh/codeml.ctl",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/Hypothesis_testing/positive_selection/data/lysozyme/lysozymeLarge_col_hom.trees",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Brain_Moore.txt",
		"/home/jeremias/Desktop/HIV_renamed.fasta",
		"/home/jeremias/Notebooks/Techniques/R_plotting.txt",
		"/home/jeremias/Desktop/HIV_dentist_renamed.fasta",
		"/home/jeremias/Desktop/sequence.fasta",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/HIV_dentist/HIV_dentist.fasta",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/HIV_dentist/HIV_align",
		"/media/Shared/Dropbox/Documents/Courses/2017 Molecular computational evolution/practicals/mrbayes/1-Exercise/conifer_dna.nex",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Bastien_Rousseau.txt",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Jeff_Thorne.txt",
		"/home/jeremias/Desktop/cisco.log",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Steve_Smith.txt",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Bastien_Rousseau/Branch_and_Bound.txt",
		"/media/Shared/Dropbox/Documents/Notebooks/Courses/Comp_Evo_2017/Bastien_Rousseau/Distance_Methods.txt",
		"/home/jeremias/Documents/practicalcomputing/pcfb/examples/FEC00001_1.seq",
		"/home/jeremias/Documents/practicalcomputing/pcfb/examples/LatLon.txt",
		"/home/jeremias/Dropbox/Bioinformatics/Scripts/Python/transect_timer_batch10.py",
		"/home/jeremias/Dropbox/Bioinformatics/Scripts/Python/python_scripting_comands.md",
		"/home/jeremias/Dropbox/Documents/Courses/Programming_life_science/Git-Workshop/SIB-Days-2016/examples/git-init.sh",
		"/home/jeremias/Documents/Python/Shell_test.py",
		"/home/jeremias/Documents/practicalcomputing/pcfb/examples/Ch3observations.txt",
		"/home/jeremias/Dropbox/Documents/Courses/Molecular_Computational_Evolution/Notes.md",
		"/home/jeremias/bioinformatics/fasta_header_renamer._joiner.sh",
		"/media/jeremias/94B0CFE7B0CFCDC4/Dokumente und Einstellungen/jerem/OneDrive/Programs/Bio_Server/Codebook for Transcriptome assembly.markdown",
		"/home/jeremias/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/media/jeremias/94B0CFE7B0CFCDC4/Dokumente und Einstellungen/jerem/OneDrive/Programs/Bio_Server/# Codebook for Transcriptome assembly #",
		"/media/jeremias/94B0CFE7B0CFCDC4/Dokumente und Einstellungen/jerem/OneDrive/Programs/Bio_Server/commands.txt",
		"/home/jeremias/Documents/Genomic16/lectures/lab/ggplot2 excercise",
		"/home/jeremias/Documents/install_essentials.sh",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/84_3.fasta",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/Huxley_multi_whole_1.fasta",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/Huxley_multi.fasta",
		"/home/jeremias/Downloads/vpnsetup64.sh",
		"/home/jeremias/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/jeremias/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/84_1.fasta",
		"/home/jeremias/Desktop/EHV-Emiliania_huxleyi/Huxley_multi_whole_1.dnd"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"vouch",
			"\"/\"",
			"homedir",
			"transrateDir",
			"config[\"fastqdir\"]",
			"???",
			"NNN+",
			"\\?+",
			"\\?",
			"\\?+",
			"?",
			"??",
			"FLPC20",
			"FLPC",
			"FLPC20",
			"FLCPC20",
			"^>.*viral sample (.+), V3 region",
			"^>.*viral sample(.+), V3 region",
			"BSSE_QGF_[0-9]{5}_[A-Z0-9]{9}_[0-9]*_(Mac[0-9a-zA-Z]{3}_[0-9]{4})_.+_.+_.+_.+_(R[0-9])_.+_.+_.+.fastq.gz",
			"\nBSSE_QGF_[0-9]{5}_[A-Z0-9]{9}_[0-9]*_(Mac[0-9a-zA-Z]{3}_[0-9]{4})_.+_.+_.+_.+_(R[0-9])_.+_.+_.+.fastq.gz",
			"b",
			"^(>.+)\\ (comp.+)$",
			"^(>)(.+)$",
			"^>",
			"^\\>",
			"^(>)(.+)$",
			"^\\>",
			"^Laumer_([A-Za-z_]+)_trinity.fasta$",
			"^Laumer_([A-Za-z_]+)trinity.fasta$",
			"([^\\t]+)\\t(\\w{3})\\w+\\,\\t(\\d+)\\t\\w+\\t(\\d+)\\:(\\d+)\\t([^\\t]+)\\t+([^\\t]+)[^\\n]*",
			"([^\\t]+)\\t(\\w{3})\\w+\\,\\t(\\d+)\\t\\w+\\t(\\d+)\\:(\\d+)\\t([^\\t]+)\\t+([^\\t]+).*",
			"([^\\t]+)\\t(\\w{3})\\w+\\,\\t(\\d+)\\t\\w+\\t(\\d+)\\:",
			"([^\\t]+)\\t(\\w{3})",
			"([^\\t]+)\\t ",
			"\\ ",
			"([^\\t\\ \\n]+)[\\t\\ ]",
			"([^\\t\\ ]+)[\\t\\ ]",
			"([^\\t\\n]+)\\t([^\\t\\n]+)\\t([^\\t\\n]+)\\t([^\\t\\n]+)\\t([^\\t\\n]+)\\t([^\\t\\n]+)",
			"([^\\t\\n]+)",
			"([^\\t]+)",
			"([^\\t]+)\\t([^\\t]+)\\t([^\\t]+)\\t([^\\t]+)\\t([^\\t]+)\\t([^\\t]+)",
			"(\\d+ \\d+'\\d+\\.\\d+\\\")[NE]",
			"(\\d+ \\d+'\\d+\\.\\d+\\\")[SW]",
			"(\\\"[NS])\\n",
			"(.+\\\"[NS])\\n",
			"(\\\"[NS])\\n",
			"(\\2\"[NS])\\n",
			"(\\2[NS])\\n",
			"([NS])\\n",
			"[NS]\\n",
			"'\\w",
			"'N",
			"'\\w",
			"\\w",
			"4",
			"\\w",
			"galma",
			"Cluster",
			"adaptors",
			">",
			"\t\t\t\t",
			">",
			"GATTTAAAAATTGCGCTGTTTTTTCCTTCTTTAACATTTTCATCAAACCATGCAGAATAGTGCCCCCTGC",
			"keys",
			"{ ",
			"option",
			"menu",
			"errksjelkrjeslkjfkldjsfkljsdlfkjkldsjafkldéj",
			">",
			"apt",
			"repository"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			">\\1",
			"\\1",
			"\\1_\\2.fastq.gz",
			"\\1\\2.fastq.gz",
			"\\1_\\2",
			"\\1",
			"\\3\\t\\2.\\t\\1\\t\\4\\t\\5\\t\\6\\t\\7",
			"\\3\\t\\2.\\t\\1\\t\\4\\t\\5",
			"\\2.\\1",
			"x",
			"\\t",
			"x\\t",
			"\\1\\t\\2\\t",
			"x",
			"\\5\\6\\1\\2\\3\\4",
			"\\1",
			"-\\1",
			"\\1\\t",
			"'",
			"",
			".",
			"",
			".",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/F/jeremias/Dropbox/Documents/CV-website/Jeremias-Brand.github.io/em.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4231,
						"regions":
						{
						},
						"selection":
						[
							[
								1031,
								1031
							]
						],
						"settings":
						{
							"syntax": "Packages/AcademicMarkdown/AcademicMarkdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "macpipe.trans.main.small.snake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15215,
						"regions":
						{
						},
						"selection":
						[
							[
								2405,
								2405
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3020.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "config.dev.yaml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1402,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/AcademicMarkdown/AcademicYaml.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "scripts/fish_genes.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9075,
						"regions":
						{
						},
						"selection":
						[
							[
								9036,
								9036
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3066.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "macpipe.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"fis",
				"scripts\\fish_genes.py"
			],
			[
				"con",
				"config.dev.yaml"
			],
			[
				"macpie.tra",
				"macpipe.trans.main.small.snake"
			],
			[
				"",
				"~/Dropbox/Documents/Courses/Molecular_Computational_Evolution/Notes_Computational_Biology.md"
			],
			[
				"comm",
				"~/Dropbox/Documents/Courses/Molecular_Computational_Evolution/Notes_Computational_Biology.md"
			],
			[
				"ch",
				"examples/Ch3observations.txt"
			],
			[
				"lat",
				"examples/LatLon.txt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 241.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
