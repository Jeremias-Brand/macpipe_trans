"""
Author: J. Brand
Affiliation: Unibas
Aim: Busco Run and summary with timestamp
Date: 20. Nov. 2016
Run: snakemake   -s Snakefile
Latest modification:

"""
# import statements
from snakemake.utils import report
from os.path import join
import os
import time


# Uses a yaml file as input
configfile: "config.yaml"

# Preparation------------------------------------------------------------------
TIMESTAMP = time.strftime("%Y%m%d")

# check if the necessary dirs exist and if not creates them
def save_mkdir( dirs ):
	for d in dirs:
		if not os.path.isdir(d):
			os.mkdir(d)
			print("Creating directory: " + d)


dirs = ["logs", "busco", "logs/busco"]
save_mkdir(dirs)

# Globals ---------------------------------------------------------------------

# define global things here

# Full path to a folder that holds all the assemblies.
FASTQ_DIR = config["fastqdir"]

# A Snakemake regular expression matching the forward mate FASTQ files.
# we get a list with the names of all the files in the working directory
# SAMPLES, = glob_wildcards(join(FASTQ_DIR, '{sample}_R1.fq'))
# Give the input files as a list


SAMPLES, = glob_wildcards(join(FASTQ_DIR, '{sample}.fasta'))

# Rules -----------------------------------------------------------------------

rule all:
    input:
        "report.html"


# add busco rule
rule busco:
    input:
        assembly =   expand("{dir}{{sample}}.fasta", dir=FASTQ_DIR, T=TIMESTAMP)
    output:
        out      =   expand(config["homedir"] + "busco/run_{{sample}}_{T}.busco/short_summary_{{sample}}_{T}.busco.txt", T=TIMESTAMP)
    params:
        py3      =   config["py3"],
        BUSCO    =   config["BUSCO"],
        BuscoLib =   config["BuscoLib"],
        homedir  =   config["homedir"],
    threads: 14
    log:
        expand("logs/busco/{{sample}}_{T}.log", T=TIMESTAMP)

    shell:
        # cd {params.outdir}
        """
        {params.py3}  {params.BUSCO} -f \
                -i {input.assembly} \
                -o {wildcards.sample}_{TIMESTAMP}.busco              \
                -l  {params.BuscoLib}    \
                -m  tran -c {threads} &>> {log} && \
        mv  run_{wildcards.sample}_{TIMESTAMP}.busco  busco/

        """
# TODO rule decision on assembly
rule gather_busco:
    # move all transrate results to same folder for easier summary later
    # we do not need the expand statement here because plot busco will just call this function many times
    input:
        normal   = expand(config["homedir"] + "busco/run_{{sample}}_{T}.busco/short_summary_{{sample}}_{T}.busco.txt", T=TIMESTAMP)
    output:
        normal   = expand("busco/summary/short_summary_{{sample}}_{T}.busco.txt", T=TIMESTAMP)
    shell:
        """
        cp {input.normal} {output.normal}
        """
rule plot_busco:
    input:
        normal   = expand("busco/summary/short_summary_{sample}_{T}.busco.txt", sample=SAMPLES, T=TIMESTAMP)
    output:
        png      = "busco/summary/run_" + TIMESTAMP + "_busco.png",
        R        = "busco/summary/run_" + TIMESTAMP + "_busco.R"
    params:
        py3      = config["py3"],
        BUSCO_p  = config["BUSCO_p"]
    shell:
        """
        {params.py3} {params.BUSCO_p} --working_directory busco/summary && \
        mv busco/summary/busco_figure.png {output.png} && \
        mv busco/summary/busco_figure.R {output.R}
        """

# TODO rename assembly headers
# TODO
# add plotting for BUSCO
# The default plotting does not work and we have to add
# options(bitmapType='cairo')
# at the beginning of the script. -.-
rule versions:
    output:
        log         = "logs/run_" + TIMESTAMP + "_software.versions"
    params:
        trinity     = config["trinity"],
        transrate   = config["transrate"],
        BUSCO       = config["BUSCO"],
        time        = TIMESTAMP
    shell:
        """
        touch {output.log}
        echo "These are the versions of software used for run: {params.time}" &>> {output.log}
        date  &>> {output.log}
        python --version &>> {output.log}
        hmmscan -h | grep -E '^\#\ H' &>> {output.log}
        blastn -h | grep Nucleotide &>> {output.log}
        embossversion &>> {output.log}
        echo "perl version: " &>> {output.log}
        perl -e 'print $];' &>> {output.log}
        {params.BUSCO} --version &>> {output.log}
        echo "transrate version:" {params.transrate} --version &>> {output.log}
#        {params.trinity}  >> {output.log}
        """
# TODO report file should contain:
# plot of coverage
# busco and transrate stats
# software versions
# timestamp
rule report:
    input:
        busco_png           = "busco/summary/run_" + TIMESTAMP + "_busco.png",
    output:
        "report.html"
    run:
        # from snakemake.utils import report
        #with open(input[0]) as trans.logs:
        #    print(trans.logs)
        report("""
        Report on macpipe_trans run
        ===================================


        .. image:: {input.busco_png}


        assembly_plot_
        """, output[0], **input)



# Finishing up --------------------------------------------------------------
onsuccess:
    print("Busco assessment orkflow finished, no error")
onerror:
    print("An error occurred with the snakemake run")
    # here it would be good to include timstamping
    shell("mail -s 'Error in Busco assessment run' jeremias.brand@unibas.ch < {log}")

# TODO add separate snakefile for annotation
